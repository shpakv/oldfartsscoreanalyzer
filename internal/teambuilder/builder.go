/*
Package teambuilder ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ—Å—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ CS2.
–ï—Å–ª–∏ –≤ –≤–∞—à–∏—Ö –∏–≥—Ä–∞—Ö —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∑–≤—É—á–∏—Ç —Ñ—Ä–∞–∑–∞ ¬´–ù—É —ç—Ç–æ –±—ã–ª–æ –Ω–µ—á–µ—Å—Ç–Ω–æ¬ª, —Ç–æ –≤—ã –ø–æ –∞–¥—Ä–µ—Å—É.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
  - **–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤**: –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Å—Ç–Ω—ã–º–∏, –Ω–æ –µ—Å–ª–∏ –≤—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç–µ ‚Äî —ç—Ç–æ –Ω–µ –Ω–∞—à–∞ –≤–∏–Ω–∞. ü§∑‚Äç‚ôÇÔ∏è
  - **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π**: –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –¥–≤–∞ –¥—Ä—É–≥–∞ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)? –õ–µ–≥–∫–æ.
  - **–ë–∞–ª–∞–Ω—Å –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É**: –ú—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–ª–ª—ã –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Å–µ–º —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É.
  - **–ù–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤**: –ó–º–µ–π–∫–∞, –ø–∞—Ä—ã, –∂–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –≤—Å—ë, —á—Ç–æ–±—ã –≤–∞—à –º–∞—Ç—á –ø—Ä–æ—à—ë–ª –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ.

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

	builder := &TeamBuilder{}
	config := &TeamConfiguration{
		Players: []TeamPlayer{
			{"Player1", 1000},
			{"Player2", 2000},
		},
		Constraints: []Constraint{
			{Type: ConstraintTogether, Player1: "Player1", Player2: "Player2"},
		},
	}
	team1, team2 := builder.Build(config)
*/
package teambuilder

import (
	"math"
	"sort"
)

// TeamBuilder ‚Äî —ç—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
// –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—Å—Ç–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω—ã–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤ CS2.
type TeamBuilder struct{}

// Build –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å —É—á–µ—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - config *TeamConfiguration: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - (Team, Team): –¥–≤–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
//
// –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
//  1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–∏–ø–∞ ConstraintTogether
//  2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
//  3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
//  4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
//  5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//
// –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(2^n), –≥–¥–µ n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
func (b *TeamBuilder) Build(config *TeamConfiguration) (Team, Team) {
	players := config.Players
	constraints := config.Constraints

	// –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–∏–ø–∞ ConstraintTogether
	linkedPlayers := make(map[string]string)
	for _, constraint := range constraints {
		if constraint.Type == ConstraintTogether {
			linkedPlayers[constraint.Player1] = constraint.Player2
			linkedPlayers[constraint.Player2] = constraint.Player1
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Å–∞
	sort.Slice(players, func(i, j int) bool {
		return players[i].Score > players[j].Score
	})

	// –ü—Ä–æ–±—É–µ–º –≤—Å–µ —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	var bestTeam1, bestTeam2 Team
	bestDiff := math.Inf(1)

	// –ú–µ—Ç–æ–¥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
	team1, team2 := distributeWithLinkedPlayers(players, linkedPlayers)
	if isConstraintSatisfied(team1, team2, constraints) {
		diff := math.Abs(team1.Score() - team2.Score())
		if diff < bestDiff {
			bestDiff = diff
			bestTeam1, bestTeam2 = team1, team2
		}
	}

	// –ú–µ—Ç–æ–¥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π
	team1, team2 = distributeSnake(players)
	if isConstraintSatisfied(team1, team2, constraints) {
		diff := math.Abs(team1.Score() - team2.Score())
		if diff < bestDiff {
			bestDiff = diff
			bestTeam1, bestTeam2 = team1, team2
		}
	}

	// –ú–µ—Ç–æ–¥ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–∏
	team1, team2 = distributePairs(players)
	if isConstraintSatisfied(team1, team2, constraints) {
		diff := math.Abs(team1.Score() - team2.Score())
		if diff < bestDiff {
			bestDiff = diff
			bestTeam1, bestTeam2 = team1, team2
		}
	}

	// –ú–µ—Ç–æ–¥ 4: –ñ–∞–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
	team1, team2 = distributeGreedy(players)
	if isConstraintSatisfied(team1, team2, constraints) {
		diff := math.Abs(team1.Score() - team2.Score())
		if diff < bestDiff {
			bestDiff = diff
			bestTeam1, bestTeam2 = team1, team2
		}
	}

	// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
	if bestDiff != math.Inf(1) {
		bestTeam1, bestTeam2 = optimizeTeams(bestTeam1, bestTeam2, constraints)
		return bestTeam1, bestTeam2
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∂–∞–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
	// –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
	team1, team2 = distributeGreedy(players)
	return optimizeTeams(team1, team2, constraints)
}

// isConstraintSatisfied –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–¥–∞–Ω–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - team1, team2 Team: –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
//   - constraints []Constraint: —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - bool: true –µ—Å–ª–∏ –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
func isConstraintSatisfied(team1, team2 Team, constraints []Constraint) bool {
	for _, constraint := range constraints {
		player1InTeam1 := playerInTeam(team1, constraint.Player1)
		player1InTeam2 := playerInTeam(team2, constraint.Player1)
		player2InTeam1 := playerInTeam(team1, constraint.Player2)
		player2InTeam2 := playerInTeam(team2, constraint.Player2)

		switch constraint.Type {
		case ConstraintTogether:
			if (player1InTeam1 && !player2InTeam1) ||
				(player1InTeam2 && !player2InTeam2) {
				return false
			}
		case ConstraintSeparate:
			if (player1InTeam1 && player2InTeam1) ||
				(player1InTeam2 && player2InTeam2) {
				return false
			}
		}
	}
	return true
}

// distributeSnake —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –º–µ—Ç–æ–¥–æ–º "–∑–º–µ–π–∫–∏".
// –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - players []TeamPlayer: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - (Team, Team): —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func distributeSnake(players []TeamPlayer) (Team, Team) {
	teamSize := len(players) / 2
	team1 := make(Team, 0, teamSize)
	team2 := make(Team, 0, teamSize)

	for i := 0; i < len(players); i += 2 {
		if i+1 < len(players) {
			if team1.Score() <= team2.Score() {
				team1 = append(team1, players[i])
				team2 = append(team2, players[i+1])
			} else {
				team2 = append(team2, players[i])
				team1 = append(team1, players[i+1])
			}
		} else {
			if team1.Score() <= team2.Score() {
				team1 = append(team1, players[i])
			} else {
				team2 = append(team2, players[i])
			}
		}
	}
	return team1, team2
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
func distributeWithLinkedPlayers(players []TeamPlayer, linkedPlayers map[string]string) (Team, Team) {
	teamSize := len(players) / 2
	if len(players)%2 != 0 {
		teamSize++
	}

	team1 := make(Team, 0, teamSize)
	team2 := make(Team, 0, teamSize)
	used := make(map[string]bool)

	// –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
	for _, player := range players {
		if used[player.NickName] {
			continue
		}

		linkedNick, hasLink := linkedPlayers[player.NickName]
		if hasLink {
			// –ù–∞—Ö–æ–¥–∏–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
			var linkedPlayer TeamPlayer
			found := false
			for _, p := range players {
				if p.NickName == linkedNick {
					linkedPlayer = p
					found = true
					break
				}
			}

			// –ï—Å–ª–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if !found || used[linkedNick] {
				continue
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–º–∞–Ω–¥—É —Å –º–µ–Ω—å—à–∏–º —Å—á–µ—Ç–æ–º
			if team1.Score() <= team2.Score() {
				team1 = append(team1, player, linkedPlayer)
			} else {
				team2 = append(team2, player, linkedPlayer)
			}

			// –û—Ç–º–µ—á–∞–µ–º –æ–±–æ–∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
			used[player.NickName] = true
			used[linkedNick] = true
		}
	}

	// –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
	for _, player := range players {
		if used[player.NickName] {
			continue
		}

		if len(team1) < teamSize && team1.Score() <= team2.Score() {
			team1 = append(team1, player)
		} else {
			team2 = append(team2, player)
		}

		used[player.NickName] = true
	}

	return team1, team2
}

// distributePairs —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–∞—Ä–∞–º–∏.
// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã –∏–∑ —Å–∏–ª—å–Ω–µ–π—à–µ–≥–æ –∏ —Å–ª–∞–±–µ–π—à–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - players []TeamPlayer: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - (Team, Team): —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func distributePairs(players []TeamPlayer) (Team, Team) {
	teamSize := len(players) / 2
	team1 := make(Team, 0, teamSize)
	team2 := make(Team, 0, teamSize)

	for i := 0; i < len(players)/2; i++ {
		if team1.Score() <= team2.Score() {
			team1 = append(team1, players[i])
			team2 = append(team2, players[len(players)-1-i])
		} else {
			team2 = append(team2, players[i])
			team1 = append(team1, players[len(players)-1-i])
		}
	}

	// –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
	if len(players)%2 != 0 {
		if team1.Score() <= team2.Score() {
			team1 = append(team1, players[len(players)/2])
		} else {
			team2 = append(team2, players[len(players)/2])
		}
	}

	return team1, team2
}

// distributeGreedy —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤.
// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É —Å –º–µ–Ω—å—à–∏–º —Å—É–º–º–∞—Ä–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - players []TeamPlayer: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - (Team, Team): —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func distributeGreedy(players []TeamPlayer) (Team, Team) {
	teamSize := len(players) / 2
	if len(players)%2 != 0 {
		teamSize++
	}
	team1 := make(Team, 0, teamSize)
	team2 := make(Team, 0, teamSize)

	for _, player := range players {
		if team1.Score() <= team2.Score() && len(team1) < teamSize {
			team1 = append(team1, player)
		} else {
			team2 = append(team2, player)
		}
	}
	return team1, team2
}

// optimizeTeams –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
// –ø—É—Ç–µ–º –ø–æ–ø–∞—Ä–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - team1, team2 Team: –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
//   - constraints []Constraint: —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - (Team, Team): –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
//
// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
//   - –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
//   - –ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
//   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∏–≥—Ä–æ–∫–∞–º–∏
func optimizeTeams(team1, team2 Team, constraints []Constraint) (Team, Team) {
	bestTeam1, bestTeam2 := team1, team2
	bestDiff := math.Abs(team1.Score() - team2.Score())

	for attempt := 0; attempt < 3; attempt++ {
		improved := false

		for i := 0; i < len(team1); i++ {
			for j := 0; j < len(team2); j++ {
				newTeam1 := make(Team, len(team1))
				newTeam2 := make(Team, len(team2))
				copy(newTeam1, bestTeam1)
				copy(newTeam2, bestTeam2)

				newTeam1[i], newTeam2[j] = newTeam2[j], newTeam1[i]

				if !isConstraintSatisfied(newTeam1, newTeam2, constraints) {
					continue
				}

				newDiff := math.Abs(newTeam1.Score() - newTeam2.Score())
				if newDiff < bestDiff {
					bestDiff = newDiff
					copy(bestTeam1, newTeam1)
					copy(bestTeam2, newTeam2)
					improved = true
				}
			}
		}

		if !improved {
			break
		}
	}

	return bestTeam1, bestTeam2
}

// playerInTeam –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - team Team: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
//   - playerName string: –∏–º—è –∏—Å–∫–æ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - bool: true –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
func playerInTeam(team Team, playerName string) bool {
	for _, player := range team {
		if player.NickName == playerName {
			return true
		}
	}
	return false
}
